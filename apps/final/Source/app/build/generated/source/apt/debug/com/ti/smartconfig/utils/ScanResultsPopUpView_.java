//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.3.1.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.ti.smartconfig.utils;

import android.content.Context;
import android.view.View;
import android.view.View.OnClickListener;
import com.ti.smartconfig.R;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 */
@SuppressWarnings("unused")
public final class ScanResultsPopUpView_
    extends ScanResultsPopUpView
    implements HasViews, OnViewChangedListener
{
    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    public ScanResultsPopUpView_(Context context) {
        super(context);
        init_();
    }

    public static ScanResultsPopUpView build(Context context) {
        ScanResultsPopUpView_ instance = new ScanResultsPopUpView_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The alreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <code>&lt;merge /&gt;</code> tag.
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), R.layout.scan_results_pop_up_view, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        this.prefs = new SharedPreferencesInterface_(getContext());
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T) this.findViewById(id));
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.scan_results_pop_up_list = hasViews.internalFindViewById(R.id.scan_results_pop_up_list);
        this.scan_results_pop_up_buttons_ok_button = hasViews.internalFindViewById(R.id.scan_results_pop_up_buttons_ok_button);
        this.scan_results_pop_up_buttons_rescan_button = hasViews.internalFindViewById(R.id.scan_results_pop_up_buttons_rescan_button);
        this.scan_results_pop_up_loader = hasViews.internalFindViewById(R.id.scan_results_pop_up_loader);
        this.scan_results_pop_up_password_layout = hasViews.internalFindViewById(R.id.scan_results_pop_up_password_layout);
        this.scan_results_pop_up_pas_editText = hasViews.internalFindViewById(R.id.scan_results_pop_up_pas_editText);
        this.scan_checkbox = hasViews.internalFindViewById(R.id.scan_checkbox);
        this.five_filter_checkbox = hasViews.internalFindViewById(R.id.five_filter_checkbox);
        if (this.scan_results_pop_up_buttons_rescan_button!= null) {
            this.scan_results_pop_up_buttons_rescan_button.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ScanResultsPopUpView_.this.scan_results_pop_up_buttons_rescan_button();
                }
            }
            );
        }
        if (this.scan_results_pop_up_buttons_ok_button!= null) {
            this.scan_results_pop_up_buttons_ok_button.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ScanResultsPopUpView_.this.scan_results_pop_up_buttons_ok_button();
                }
            }
            );
        }
        afterViews();
    }

    @Override
    void checkForPasswordLayout(final String ssid) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ScanResultsPopUpView_.super.checkForPasswordLayout(ssid);
            }
        }
        , 0L);
    }

    @Override
    void scan() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ScanResultsPopUpView_.super.scan();
            }
        }
        , 0L);
    }

    @Override
    void showToastWithMessage(final String msg) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ScanResultsPopUpView_.super.showToastWithMessage(msg);
            }
        }
        , 0L);
    }

    @Override
    void print(final String msg) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ScanResultsPopUpView_.super.print(msg);
            }
        }
        , 0L);
    }

    @Override
    void startWifiScan() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ScanResultsPopUpView_.super.startWifiScan();
            }
        }
        , 0L);
    }
}
