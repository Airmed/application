//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.2.
//


package com.ti.smartconfig.utils;

import android.content.Context;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.ti.smartconfig.R.id;
import com.ti.smartconfig.R.layout;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class Popup_
    extends Popup
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    public Popup_(Context context) {
        super(context);
        init_();
    }

    public static Popup build(Context context) {
        Popup_ instance = new Popup_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.popup_layout, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        popup_text = ((TextView) hasViews.findViewById(id.popup_text));
        popup_leftButton_text = ((TextView) hasViews.findViewById(id.popup_leftButton_text));
        popup_rightButton_text = ((TextView) hasViews.findViewById(id.popup_rightButton_text));
        popup_status_image = ((ImageView) hasViews.findViewById(id.popup_status_image));
        popup_text_headline = ((TextView) hasViews.findViewById(id.popup_text_headline));
        popup_right_button_layout = ((RelativeLayout) hasViews.findViewById(id.popup_right_button_layout));
        popup_buttons_layout = ((LinearLayout) hasViews.findViewById(id.popup_buttons_layout));
        if (popup_rightButton_text!= null) {
            popup_rightButton_text.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    Popup_.this.popup_rightButton_text();
                }

            }
            );
        }
        {
            View view = hasViews.findViewById(id.popup_leftButton);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        Popup_.this.popup_leftButton();
                    }

                }
                );
            }
        }
        afterViews();
    }

}
